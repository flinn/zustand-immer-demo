{"version":3,"sources":["AppInit/types.ts","Utilities/create-selectors.ts","AppInit/store.ts","AppInit/use-app-init-stage.ts","Todos/todo-store.ts","SessionContext/ContextIdentity/store.ts","SessionContext/ContextIdentity/use-session-context-identity.ts","SessionContext/ContextProperties/store.ts","ApiClient/mock-user-data.ts","ApiClient/axios-instance.ts","App.tsx","AppInit/use-track-app-init-stage.ts","ApiClient/user-client-wrapper.ts","index.tsx"],"names":["AppInitStage","AppInitStageProgression","PROCESS_STARTED","description","percent","SESSION_SPAWNED","CONFIGS_LOADED","CLIENTS_INITIALIZED","CONTEXTS_IDENTIFIED","USER_INTERFACE_DISPLAYED","PROCESS_COMPLETED","SessionStartupType","createSelectors","_store","store","use","k","Object","keys","getState","s","detectFirstLaunch","_parsed$state","stored","localStorage","getItem","undefined","JSON","parse","state","isFirstAppLaunch","error","console","warn","appInitStore","create","persist","immer","set","currentStage","sessionStartupType","COLD_START","vendorActionMaps","setSessionStartupType","startType","setIsFirstAppLaunch","isFirstLaunch","startAppInit","registerVendorActionsMap","actionsMap","action","vendorFn","entries","actions","push","initializeFirstLaunch","log","clearLocalStorage","removeItem","getLocalStorageInfo","_parsed$state2","hasData","dataSize","Blob","size","parsed","lastModified","name","partialize","onRehydrateStorage","useAppInitStage","registerVendorActions","fromTodoStore","todos","id","title","done","toggleTodo","todoId","sessionContextIdentityStore","appSessionId","anonymousId","externalDeviceSessionId","externalUserId","setAppSessionId","concat","uuid","slice","replace","setAnonymousId","setExternalDeviceSessionId","newExternalDeviceSessionId","ulid","setExternalUserId","resetSessionIdentity","useSessionContextIdentity","useEffect","user","device","userLastUpdatedAt","deviceLastUpdatedAt","setUserProperties","properties","Date","now","setDeviceProperties","removeUserProperties","propNames","omit","removeDeviceProperties","createRandomUser","userId","faker","string","username","internet","email","avatar","image","password","birthdate","date","registeredAt","past","getFakeUsers","count","arguments","length","helpers","multiple","getContextIdentity","hasExternalUserIdBeenSet","subscribe","prevState","instance","getInstance","axiosClient","axios","defaults","baseURL","headers","common","timeout","interceptors","request","async","config","Promise","reject","response","fakeResponse","res","url","endsWith","data","status","statusText","_objectSpread","fakeUserResponse","App","initStage","users","setUsers","useState","isLoadingUsers","setIsLoadingUsers","localStorageInfo","setLocalStorageInfo","_ref","setStartType","useTrackAppInitStage","fetchUsers","useCallback","userList","get","getUserList","toggleSessionStartupType","WARM_START","toggleIsFirstAppLaunch","newUserId","window","location","reload","refreshLocalStorageInfo","completedTodos","values","filter","todo","totalTodos","progressPercentage","appInitProgressPercentage","appInitProgressDescription","_jsx","_Fragment","children","_jsxs","Container","fluid","className","Row","Col","xs","ProgressBar","style","height","variant","animated","striped","lg","Card","Header","Body","Button","onClick","Badge","bg","Alert","map","Form","Check","type","checked","onChange","width","label","Math","round","disabled","Spinner","animation","role","index","Image","src","alt","roundedCircle","toLocaleDateString","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e580c743.chunk.js","sourcesContent":["// Enum for AppInit Stages\r\nexport enum AppInitStage {\r\n  PROCESS_STARTED = 'PROCESS_STARTED',\r\n  SESSION_SPAWNED = 'SESSION_SPAWNED',\r\n  CONFIGS_LOADED = 'CONFIGS_LOADED',\r\n  CLIENTS_INITIALIZED = 'CLIENTS_INITIALIZED',\r\n  CONTEXTS_IDENTIFIED = 'CONTEXTS_IDENTIFIED',\r\n  USER_INTERFACE_DISPLAYED = 'USER_INTERFACE_DISPLAYED',\r\n  PROCESS_COMPLETED = 'PROCESS_COMPLETED',\r\n}\r\n\r\nexport enum AppInitVendorActions {\r\n  LOAD_CONFIG = 'LOAD_CONFIG',\r\n  INITIALIZE_CLIENT = 'INITIALIZE_CLIENT',\r\n  RUN_AFTER_CLIENT_INITIALIZATION = 'RUN_AFTER_CLIENT_INITIALIZATION',\r\n  RUN_BEFORE_CONTEXT_IDENTIFICATION = 'RUN_AFTER_CONTEXT_IDENTIFICATION',\r\n  RUN_BEFORE_USER_INTERFACE_DISPALYED = 'RUN_BEFORE_USER_INTERFACE_DISPALYED',\r\n  BEFORE_APPINIT_PROCESS_COMPLETED = 'BEFORE_APPINIT_PROCESS_COMPLETED',\r\n}\r\n\r\nexport const AppInitStageProgression: Record<AppInitStage, { description: string, percent: number }> = {\r\n  PROCESS_STARTED: { description: 'AppInit Process Started', percent: 0 },\r\n  SESSION_SPAWNED: { description: 'AppInit Session Spawned', percent: 20 },\r\n  CONFIGS_LOADED: { description: 'AppInit Configs Loaded', percent: 30 },\r\n  CLIENTS_INITIALIZED: { description: 'AppInit Clients Initialized', percent: 50 },\r\n  CONTEXTS_IDENTIFIED: { description: 'AppInit Contexts Identified', percent: 70 },\r\n  USER_INTERFACE_DISPLAYED: { description: 'AppInit Runtime Vendor Use Enabled', percent: 90 },\r\n  PROCESS_COMPLETED: { description: 'AppInit Process Completed', percent: 100 },\r\n}\r\n\r\nexport type VendorInitActionsMap = {\r\n  vendorName: string\r\n  actions: Partial<Record<AppInitVendorActions, Function>>\r\n}\r\n\r\n// Enum for Session Startup Types\r\nexport enum SessionStartupType {\r\n  COLD_START = 'COLD_START',\r\n  WARM_START = 'WARM_START',\r\n  DEEP_LINK = 'DEEP_LINK',\r\n}\r\n","import { StoreApi, UseBoundStore } from 'zustand'\r\n\r\ntype WithSelectors<S> = S extends { getState: () => infer T }\r\n  ? S & { use: { [K in keyof T]: () => T[K] } }\r\n  : never\r\n\r\nexport const createSelectors = <S extends UseBoundStore<StoreApi<object>>>(\r\n  _store: S,\r\n) => {\r\n  const store = _store as WithSelectors<typeof _store>\r\n  store.use = {}\r\n  for (const k of Object.keys(store.getState())) {\r\n    ; (store.use as any)[k] = () => store(s => s[k as keyof typeof s])\r\n  }\r\n\r\n  return store\r\n}\r\n","import create from 'zustand'\r\nimport { immer } from 'zustand/middleware/immer'\r\nimport { persist } from 'zustand/middleware'\r\nimport { AppInitStage, AppInitVendorActions, SessionStartupType, VendorInitActionsMap } from './types'\r\nimport { createSelectors } from '../Utilities/create-selectors'\r\n\r\nexport interface AppInitState {\r\n  currentStage: AppInitStage\r\n  isFirstAppLaunch: boolean\r\n  sessionStartupType: SessionStartupType\r\n  vendorActionMaps: Record<AppInitVendorActions, Function[]>\r\n}\r\nexport type AppInitActions = {\r\n  startAppInit: (isFirstLaunch: boolean, startType: SessionStartupType) => void\r\n  registerVendorActionsMap: (actionsMap: VendorInitActionsMap) => void\r\n  setSessionStartupType: (startType: SessionStartupType) => void\r\n  setIsFirstAppLaunch: (isFirstLaunch: boolean) => void\r\n  initializeFirstLaunch: () => void\r\n  clearLocalStorage: () => void\r\n  getLocalStorageInfo: () => { hasData: boolean; dataSize: number; lastModified?: string }\r\n}\r\n\r\n// Utility function to detect if this is the first time the app is launched\r\nconst detectFirstLaunch = (): boolean => {\r\n  try {\r\n    // Check if we have any stored data\r\n    const stored = localStorage.getItem('app-init-storage')\r\n    if (!stored) return true\r\n    \r\n    // Parse the stored data to see if isFirstAppLaunch was ever set\r\n    const parsed = JSON.parse(stored)\r\n    return parsed.state?.isFirstAppLaunch === undefined\r\n  } catch (error) {\r\n    console.warn('Error reading localStorage, defaulting to first launch:', error)\r\n    return true\r\n  }\r\n}\r\n\r\nexport const appInitStoreBase = create<AppInitState & AppInitActions>()(\r\n  persist(\r\n    immer(set => ({\r\n      currentStage: AppInitStage.PROCESS_STARTED,\r\n      isFirstAppLaunch: detectFirstLaunch(), // Detect first launch\r\n      sessionStartupType: SessionStartupType.COLD_START,\r\n      vendorActionMaps: {} as any,\r\n      setSessionStartupType: (startType: SessionStartupType) => {\r\n        set((state) => {\r\n          state.sessionStartupType = startType\r\n        })\r\n      },\r\n      setIsFirstAppLaunch: (isFirstLaunch: boolean) => {\r\n        set((state) => {\r\n          state.isFirstAppLaunch = isFirstLaunch\r\n        })\r\n      },\r\n      startAppInit: (isFirstLaunch: boolean, startType: SessionStartupType) => {\r\n        set((state) => {\r\n          state.currentStage = AppInitStage.SESSION_SPAWNED\r\n          state.isFirstAppLaunch = isFirstLaunch\r\n          state.sessionStartupType = startType\r\n        })\r\n      },\r\n      registerVendorActionsMap: (actionsMap: VendorInitActionsMap) => {\r\n        set((state) => {\r\n          for (const [action, vendorFn] of Object.entries(actionsMap.actions)) {\r\n            if (state.vendorActionMaps[action as AppInitVendorActions]) {\r\n              state.vendorActionMaps[action as AppInitVendorActions].push(vendorFn)\r\n            }\r\n            else {\r\n              state.vendorActionMaps[action as AppInitVendorActions] = [vendorFn]\r\n            }\r\n          }\r\n        })\r\n      },\r\n      initializeFirstLaunch: () => {\r\n        set((state) => {\r\n          // This will be called when the app first loads\r\n          // The persist middleware will automatically save this to localStorage\r\n          if (state.isFirstAppLaunch) {\r\n            console.log('🎉 First time app launch detected!')\r\n          }\r\n        })\r\n      },\r\n      clearLocalStorage: () => {\r\n        try {\r\n          localStorage.removeItem('app-init-storage')\r\n          console.log('🗑️ localStorage cleared')\r\n        } catch (error) {\r\n          console.error('Error clearing localStorage:', error)\r\n        }\r\n      },\r\n      getLocalStorageInfo: () => {\r\n        try {\r\n          const stored = localStorage.getItem('app-init-storage')\r\n          if (!stored) {\r\n            return { hasData: false, dataSize: 0 }\r\n          }\r\n          \r\n          const dataSize = new Blob([stored]).size\r\n          const parsed = JSON.parse(stored)\r\n          const lastModified = parsed.state?.isFirstAppLaunch !== undefined ? 'Recently' : undefined\r\n          \r\n          return {\r\n            hasData: true,\r\n            dataSize,\r\n            lastModified\r\n          }\r\n        } catch (error) {\r\n          console.error('Error reading localStorage info:', error)\r\n          return { hasData: false, dataSize: 0 }\r\n        }\r\n      },\r\n    })),\r\n    {\r\n      name: 'app-init-storage', // unique name for localStorage key\r\n      partialize: (state) => ({ \r\n        isFirstAppLaunch: state.isFirstAppLaunch,\r\n        sessionStartupType: state.sessionStartupType \r\n      }), // Only persist these fields\r\n      onRehydrateStorage: () => (state) => {\r\n        // Called when the store is rehydrated from localStorage\r\n        if (state) {\r\n          console.log('📱 App state restored from localStorage:', {\r\n            isFirstAppLaunch: state.isFirstAppLaunch,\r\n            sessionStartupType: state.sessionStartupType\r\n          })\r\n        }\r\n      },\r\n    }\r\n  ))\r\n\r\nexport const appInitStore = createSelectors(appInitStoreBase)\r\n","import { appInitStore } from './store'\r\n\r\nexport const useAppInitStage = () => {\r\n  const currentStage = appInitStore.use.currentStage()\r\n  const startType = appInitStore.use.sessionStartupType()\r\n  const isFirstAppLaunch = appInitStore.use.isFirstAppLaunch()\r\n\r\n  const registerVendorActions = appInitStore(state => state.registerVendorActionsMap)\r\n\r\n  return {\r\n    currentStage,\r\n    registerVendorActions,\r\n    startType,\r\n    isFirstAppLaunch,\r\n  }\r\n}\r\n\r\nexport default useAppInitStage\r\n","import create from 'zustand'\r\nimport { immer } from 'zustand/middleware/immer'\r\nimport { createSelectors } from '../Utilities/create-selectors'\r\n\r\ninterface Todo {\r\n  id: string\r\n  title: string\r\n  done: boolean\r\n}\r\n\r\ntype TodoState = {\r\n  todos: Record<string, Todo>\r\n}\r\n\r\ntype TodoActions = {\r\n  toggleTodo: (todoId: string) => void\r\n}\r\n\r\nexport const todoStore = create<TodoState & TodoActions>()(\r\n  immer(set => ({\r\n    todos: {\r\n      '82471c5f-4207-4b1d-abcb-b98547e01a3e': {\r\n        id: '82471c5f-4207-4b1d-abcb-b98547e01a3e',\r\n        title: 'Learn Zustand',\r\n        done: false,\r\n      },\r\n      '354ee16c-bfdd-44d3-afa9-e93679bda367': {\r\n        id: '354ee16c-bfdd-44d3-afa9-e93679bda367',\r\n        title: 'Learn Jotai',\r\n        done: false,\r\n      },\r\n      '771c85c5-46ea-4a11-8fed-36cc2c7be344': {\r\n        id: '771c85c5-46ea-4a11-8fed-36cc2c7be344',\r\n        title: 'Learn Valtio',\r\n        done: false,\r\n      },\r\n      '363a4bac-083f-47f7-a0a2-aeeee153a99c': {\r\n        id: '363a4bac-083f-47f7-a0a2-aeeee153a99c',\r\n        title: 'Learn Signals',\r\n        done: false,\r\n      },\r\n    },\r\n    toggleTodo: (todoId: string) =>\r\n      set((state) => {\r\n        state.todos[todoId].done = !state.todos[todoId].done\r\n      }),\r\n  })),\r\n)\r\n\r\nexport const fromTodoStore = createSelectors(todoStore)\r\n","import create from 'zustand'\r\nimport { immer } from 'zustand/middleware/immer'\r\nimport { createSelectors } from '../../Utilities/create-selectors'\r\nimport { v4 as uuid } from 'uuid'\r\nimport { ulid } from 'ulid'\r\n\r\nexport type SessionIdentityState = {\r\n  appSessionId: string | null\r\n  anonymousId: string | null\r\n  externalDeviceSessionId: string | null\r\n  externalUserId: string | null\r\n}\r\n\r\nexport type SessionIdentityActions = {\r\n  setAppSessionId: () => void\r\n  setAnonymousId: (anonymousId?: string | undefined) => void\r\n  setExternalDeviceSessionId: (externalDeviceSessionId?: string | undefined) => void\r\n  setExternalUserId: (externalUserId: string) => void\r\n  resetSessionIdentity: () => void\r\n}\r\n\r\nexport const sessionIdentityStoreBase = create<SessionIdentityState & SessionIdentityActions>()(\r\n  immer(set => ({\r\n    appSessionId: null,\r\n    anonymousId: null,\r\n    externalDeviceSessionId: null,\r\n    externalUserId: null,\r\n    setAppSessionId: () => {\r\n      set((state) => {\r\n        state.appSessionId = `ASID_${uuid().slice(0, 24).replace(/-/g, '')}`;\r\n        console.log(`[z] appSessionId == ${state.appSessionId}`);\r\n      })\r\n    },\r\n    setAnonymousId: (anonymousId?: string | undefined) => {\r\n      set((state) => {\r\n        state.anonymousId = anonymousId ?? `ANON_${(uuid().slice(0, 13).replace(/-/g, ''))}`;\r\n        console.log(`[z] anonymousId == ${state.anonymousId}`);\r\n      })\r\n    },\r\n    setExternalDeviceSessionId: (externalDeviceSessionId?: string | undefined) => {\r\n      set((state) => {\r\n        const newExternalDeviceSessionId = externalDeviceSessionId ?? ulid().slice(0, 20).replace(/-/g, '');\r\n        state.externalDeviceSessionId = `DEVICE_${newExternalDeviceSessionId}`;\r\n        console.log(`[z] externalDeviceSessionId == ${state.externalDeviceSessionId}`);\r\n      })\r\n    },\r\n    setExternalUserId: (externalUserId: string) => {\r\n      set((state) => {\r\n        state.externalUserId = externalUserId\r\n        console.log(`[z] externalUserId == ${state.externalUserId}`);\r\n      })\r\n    },\r\n    resetSessionIdentity: () => {\r\n      set((state) => {\r\n        state.appSessionId = uuid()\r\n        state.anonymousId = uuid()\r\n        state.externalDeviceSessionId = null\r\n        state.externalUserId = null\r\n        console.log(`[z] reset SessionIdentity state`);\r\n      })\r\n    },\r\n  })))\r\n\r\nexport const sessionContextIdentityStore = createSelectors(sessionIdentityStoreBase)\r\n","import { AppInitStage } from '../../AppInit/types'\r\nimport { useAppInitStage } from '../../AppInit'\r\nimport { useEffect } from 'react'\r\nimport { SessionIdentityState, sessionContextIdentityStore } from './store'\r\n\r\nexport const useSessionContextIdentity = (): SessionIdentityState => {\r\n  const appSessionId = sessionContextIdentityStore.use.appSessionId()\r\n  const anonymousId = sessionContextIdentityStore.use.anonymousId()\r\n  const externalDeviceSessionId = sessionContextIdentityStore.use.externalDeviceSessionId()\r\n  const externalUserId = sessionContextIdentityStore.use.externalUserId()\r\n  const { currentStage, isFirstAppLaunch } = useAppInitStage()\r\n\r\n  const setAppSessionId = sessionContextIdentityStore(state => state.setAppSessionId)\r\n  const setAnonymousId = sessionContextIdentityStore(state => state.setAnonymousId)\r\n  const setExternalDeviceSessionId = sessionContextIdentityStore(state => state.setExternalDeviceSessionId)\r\n\r\n  useEffect(() => {\r\n    if (currentStage === AppInitStage.SESSION_SPAWNED) {\r\n      setAppSessionId()\r\n      if (isFirstAppLaunch) {\r\n        setAnonymousId()\r\n        setExternalDeviceSessionId()\r\n      }\r\n    }\r\n  }, [currentStage, setAppSessionId, isFirstAppLaunch, setAnonymousId])\r\n\r\n  return {\r\n    appSessionId,\r\n    anonymousId,\r\n    externalDeviceSessionId,\r\n    externalUserId,\r\n  }\r\n}\r\n","import { omit } from 'lodash'\r\nimport { immer } from 'zustand/middleware/immer'\r\nimport create from 'zustand'\r\nimport { createSelectors } from '../../Utilities/create-selectors'\r\nimport { UserProperties, DeviceProperties } from '../types'\r\n\r\nexport type SessionPropertiesState = {\r\n  user: UserProperties | null\r\n  device: DeviceProperties | null\r\n  userLastUpdatedAt: number | null\r\n  deviceLastUpdatedAt: number | null\r\n}\r\n\r\nexport type SessionPropertiesActions = {\r\n  setUserProperties: (properties: UserProperties) => void\r\n  setDeviceProperties: (properties: DeviceProperties) => void\r\n  removeUserProperties: (propNames: string[]) => void\r\n  removeDeviceProperties: (propNames: string[]) => void\r\n}\r\n\r\nexport const useSessionPropertiesStoreBase = create<SessionPropertiesState & SessionPropertiesActions>()(\r\n  immer(set => ({\r\n    user: null,\r\n    device: null,\r\n    userLastUpdatedAt: null,\r\n    deviceLastUpdatedAt: null,\r\n    setUserProperties: (properties: UserProperties) => {\r\n      set((state) => {\r\n        state.user = properties\r\n        state.userLastUpdatedAt = Date.now()\r\n      })\r\n    },\r\n    setDeviceProperties: (properties: DeviceProperties) => {\r\n      set((state) => {\r\n        state.device = properties\r\n        state.deviceLastUpdatedAt = Date.now()\r\n      })\r\n    },\r\n    removeUserProperties: (propNames: string[]) => {\r\n      set((state) => {\r\n        state.user = omit(state.user, propNames) as UserProperties\r\n        state.userLastUpdatedAt = Date.now()\r\n      })\r\n    },\r\n    removeDeviceProperties: (propNames: string[]) => {\r\n      set((state) => {\r\n        state.device = omit(state.device, propNames) as DeviceProperties\r\n        state.deviceLastUpdatedAt = Date.now()\r\n      })\r\n    },\r\n  })))\r\n\r\nexport const useSessionPropertiesStore = createSelectors(useSessionPropertiesStoreBase)\r\n","import { faker } from '@faker-js/faker'\r\nimport { AxiosResponse } from 'axios'\r\n\r\nexport function createRandomUser() {\r\n  return {\r\n    userId: faker.string.uuid(),\r\n    username: faker.internet.username(),\r\n    email: faker.internet.email(),\r\n    avatar: faker.image.avatar(),\r\n    password: faker.internet.password(),\r\n    birthdate: faker.date.birthdate(),\r\n    registeredAt: faker.date.past(),\r\n  }\r\n}\r\n\r\nexport const fakedUsers = (count: number) => faker.helpers.multiple(createRandomUser, {\r\n  count,\r\n})\r\n\r\nexport const getFakeUsers = (numFakeUsers: number = 5) => {\r\n  return fakedUsers(numFakeUsers)\r\n}\r\n\r\nexport const fakeUserListResponse = (res: AxiosResponse) => {\r\n  return {\r\n    data: getFakeUsers(),\r\n    status: 200,\r\n    statusText: 'OK',\r\n    headers: {\r\n      ...res.headers,\r\n    },\r\n    config: {\r\n      ...res.config,\r\n    },\r\n    request: {\r\n      ...res.request,\r\n    },\r\n  }\r\n}\r\n\r\nexport const fakeUserResponse = (res: AxiosResponse) => {\r\n  return {\r\n    data: createRandomUser(),\r\n    status: 200,\r\n    statusText: 'OK',\r\n    headers: {\r\n      ...res.headers,\r\n    },\r\n    config: {\r\n      ...res.config,\r\n    },\r\n    request: {\r\n      ...res.request,\r\n    },\r\n  }\r\n}\n","import axios from 'axios'\r\nimport { sessionContextIdentityStore } from '../SessionContext/ContextIdentity/store'\r\nimport { fakeUserListResponse, fakeUserResponse } from './mock-user-data'\r\n\r\nexport const getContextIdentity = () => {\r\n  const ctxIdentity = sessionContextIdentityStore.getState()\r\n  return ctxIdentity\r\n}\r\n\r\nlet hasExternalUserIdBeenSet = false\r\n\r\nconsole.log('hasExternalUserIdBeenSet (initially)?', hasExternalUserIdBeenSet)\r\n\r\nsessionContextIdentityStore.subscribe((state, prevState) => {\r\n  if (state.externalUserId !== prevState.externalUserId && state.externalUserId !== null) {\r\n    console.log('externalUserId changed!', state.externalUserId)\r\n    hasExternalUserIdBeenSet = true\r\n  }\r\n})\r\n\r\nexport const getInstance = () => {\r\n  const axiosClient = axios.create()\r\n\r\n  axiosClient.defaults.baseURL = 'https://jsonplaceholder.typicode.com'\r\n  axiosClient.defaults.headers.common['Content-Type'] = 'application/json'\r\n  axiosClient.defaults.headers.common['Accept'] = 'application/json'\r\n  axiosClient.defaults.headers.common['X-App-Session-Id'] = `${getContextIdentity().appSessionId}`\r\n  axiosClient.defaults.headers.common['X-Anonymous-Id'] = `${getContextIdentity().anonymousId}`\r\n  axiosClient.defaults.headers.common['X-External-Device-Session-Id'] = `${getContextIdentity().externalDeviceSessionId}`\r\n\r\n  axiosClient.defaults.timeout = 5000\r\n\r\n  axiosClient.interceptors.request.use(async (config) => {\r\n    if (hasExternalUserIdBeenSet) {\r\n      const externalUserId = getContextIdentity().externalUserId\r\n      console.log('setting \"X-External-User-Id\"', externalUserId)\r\n      config.headers['X-External-User-Id'] = externalUserId\r\n    }\r\n    return config\r\n  }, (error) => {\r\n    return Promise.reject(error)\r\n  })\r\n\r\n  axiosClient.interceptors.response.use(async (response) => {\r\n    console.log('original response', response)\r\n    let fakeResponse = null\r\n    if (response.config.url.endsWith('/users')) {\r\n      fakeResponse = fakeUserListResponse(response)\r\n    }\n    else {\r\n      fakeResponse = fakeUserResponse(response)\r\n    }\r\n    console.log('fake response', fakeResponse)\r\n    return fakeResponse\r\n  }, (error) => {\r\n    return Promise.reject(error)\r\n  })\r\n\r\n  return axiosClient\r\n}\r\n\r\nconst instance = getInstance()\r\n\r\nexport { instance }\r\n\r\nexport default instance\r\n","import { useCallback, useEffect, useState, ReactElement } from 'react'\r\nimport { useAppInitStage, AppInitStageProgression, SessionStartupType, useTrackAppInitStage } from './AppInit'\r\nimport { fromTodoStore } from './Todos/todo-store'\r\nimport { useSessionContextIdentity } from './SessionContext'\r\nimport { getUserList } from './ApiClient'\r\nimport { sessionContextIdentityStore } from './SessionContext/ContextIdentity/store'\r\nimport { ulid } from 'ulid'\r\nimport { appInitStore } from './AppInit/store'\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Button,\r\n  ProgressBar,\r\n  Badge,\r\n  Alert,\r\n  Spinner,\r\n  Form,\r\n  Image,\r\n} from 'react-bootstrap'\r\n\r\nexport const App = (): ReactElement<any, any> => {\r\n  const todos = fromTodoStore.use.todos()\r\n  const toggleTodo = fromTodoStore(state => state.toggleTodo)\r\n\r\n  const { startType, isFirstAppLaunch, currentStage: initStage } = useAppInitStage()\r\n  const { appSessionId, externalDeviceSessionId, externalUserId, anonymousId } = useSessionContextIdentity()\r\n\r\n  // Users state\r\n  const [users, setUsers] = useState<any[]>([])\r\n  const [isLoadingUsers, setIsLoadingUsers] = useState(false)\r\n  const [localStorageInfo, setLocalStorageInfo] = useState<{ hasData: boolean; dataSize: number; lastModified?: string }>({ hasData: false, dataSize: 0 })\r\n\r\n  const { setSessionStartupType, setIsFirstAppLaunch } = useTrackAppInitStage({\r\n    isFirstAppLaunch,\r\n    startType,\r\n  })\r\n\r\n  const fetchUsers = useCallback(async () => {\r\n    setIsLoadingUsers(true)\r\n    try {\r\n      const userList = await getUserList()\r\n      setUsers(userList)\r\n      console.log('Fetched users:', userList)\r\n    }\r\n    catch (error) {\r\n      console.error('Error fetching users:', error)\r\n    }\r\n    finally {\r\n      setIsLoadingUsers(false)\r\n    }\r\n  }, [])\r\n\r\n  const toggleSessionStartupType = useCallback(() => {\r\n    console.log('toggleSessionStartupType', startType)\r\n    setSessionStartupType(startType === SessionStartupType.COLD_START ? SessionStartupType.WARM_START : SessionStartupType.COLD_START)\r\n  }, [startType, setSessionStartupType])\r\n\r\n  const toggleIsFirstAppLaunch = useCallback(() => {\r\n    console.log('toggleIsFirstAppLaunch', isFirstAppLaunch)\r\n    setIsFirstAppLaunch(!isFirstAppLaunch)\r\n  }, [isFirstAppLaunch, setIsFirstAppLaunch])\r\n\r\n  const setExternalUserId = useCallback(() => {\r\n    const newUserId = ulid().slice(0, 10);\r\n    sessionContextIdentityStore.getState().setExternalUserId(newUserId)\r\n    console.log('----> Setting externalUserId to be:', newUserId)\r\n  }, [])\r\n\r\n  const clearLocalStorage = useCallback(() => {\r\n    appInitStore.getState().clearLocalStorage()\r\n    // Refresh localStorage info\r\n    setLocalStorageInfo(appInitStore.getState().getLocalStorageInfo())\r\n    // Force a page reload to reset the state\r\n    window.location.reload()\r\n  }, [])\r\n\r\n  const refreshLocalStorageInfo = useCallback(() => {\r\n    setLocalStorageInfo(appInitStore.getState().getLocalStorageInfo())\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    console.log(`First time render of App.tsx -- [isFirstAppLaunch=${isFirstAppLaunch}|initStage=${initStage}|startType=${startType}|appSessionId=${appSessionId}]`)\r\n    // Initialize first launch detection\r\n    appInitStore.getState().initializeFirstLaunch()\r\n    // Get localStorage info\r\n    setLocalStorageInfo(appInitStore.getState().getLocalStorageInfo())\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    fetchUsers()\r\n  }, [fetchUsers])\r\n\r\n  const completedTodos = Object.values(todos).filter(todo => todo.done).length\r\n  const totalTodos = Object.values(todos).length\r\n  const progressPercentage = totalTodos > 0 ? (completedTodos / totalTodos) * 100 : 0\r\n\r\n  const appInitProgressPercentage = AppInitStageProgression[initStage].percent\r\n  const appInitProgressDescription = AppInitStageProgression[initStage].description\r\n\r\n  return (\r\n    <>\r\n      <Container fluid className=\"py-4\">\r\n        {/* Header Section */}\r\n        <Row className=\"mb-4\">\r\n          <Col xs={12} className=\"text-center mb-3\">\r\n            <h1 className=\"display-4 fw-bold text-primary mb-2\">Zustand + Immer Demo</h1>\r\n            <p className=\"lead text-muted\">Application Initialization & State Management Dashboard</p>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row className=\"g-4 p-1 mb-2 bg-info-subtle text-white\">\r\n          <Col xs={12} className=\"text-center\">\r\n            <p className=\"h3\">\r\n              {appInitProgressDescription}\r\n              {' '}\r\n              <em>{`(${appInitProgressPercentage}% Complete)`}</em>\r\n            </p>\r\n            <ProgressBar\r\n              now={appInitProgressPercentage}\r\n              className=\"mb-4 p-1\"\r\n              style={{ height: 45 }}\r\n              variant=\"info\"\r\n              animated\r\n              striped\r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row className=\"g-4 p-1\">\r\n          {/* App Init Status Section */}\r\n          <Col lg={4}>\r\n            <Card className=\"shadow\">\r\n              <Card.Header className=\"bg-primary text-white\">\r\n                <p className=\"h3 card-title mb-0\">\r\n                  ⚡ AppInit Process Metadata\r\n                </p>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                {/* Control Buttons */}\r\n                <div className=\"d-grid gap-2 mb-4\">\r\n                  <Button\r\n                    variant=\"secondary\"\r\n                    size=\"sm\"\r\n                    onClick={() => toggleIsFirstAppLaunch()}\r\n                  >\r\n                    <i className=\"bi bi-check-circle me-2\"></i>\r\n                    Toggle IsFirstAppLaunch\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"secondary\"\r\n                    size=\"sm\"\r\n                    onClick={() => toggleSessionStartupType()}\r\n                  >\r\n                    <i className=\"bi bi-arrow-clockwise me-2\"></i>\r\n                    Toggle Startup Type\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"warning\"\r\n                    size=\"lg\"\r\n                    onClick={() => setExternalUserId()}\r\n                  >\r\n                    <i className=\"bi bi-person-badge me-2\"></i>\r\n                    Set External User ID\r\n                  </Button>\r\n                </div>\r\n\r\n                <hr />\r\n\r\n                {/* Status Information */}\r\n                <Row className=\"g-3\">\r\n                  <Col xs={12}>\r\n                    <div className=\"d-flex justify-content-between align-items-center p-3 bg-light rounded\">\r\n                      <span className=\"fw-semibold\">Current Stage:</span>\r\n                      <Badge bg=\"info\" className=\"fs-6\">{initStage}</Badge>\r\n                    </div>\r\n                  </Col>\r\n\r\n                  <Col xs={12}>\r\n                    <div className=\"d-flex justify-content-between align-items-center p-3 bg-light rounded\">\r\n                      <span className=\"fw-semibold\">Session Startup Type:</span>\r\n                      <Badge\r\n                        bg={startType === SessionStartupType.WARM_START ? 'warning' : 'primary'}\r\n                        className=\"fs-6\"\r\n                      >\r\n                        {startType}\r\n                      </Badge>\r\n                    </div>\r\n                  </Col>\r\n\r\n                  <Col xs={12}>\r\n                    <div className=\"d-flex justify-content-between align-items-center p-3 bg-light rounded\">\r\n                      <span className=\"fw-semibold\">Is First Time App Launched?</span>\r\n                      <Badge\r\n                        bg={isFirstAppLaunch ? 'success' : 'danger'}\r\n                        className=\"fs-6\"\r\n                      >\r\n                        {isFirstAppLaunch ? 'True' : 'False'}\r\n                      </Badge>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n\r\n                {/* localStorage Persistence Info */}\r\n                <Alert variant=\"info\" className=\"mt-3\">\r\n                  <i className=\"bi bi-database me-2\"></i>\r\n                  <strong>localStorage Persistence:</strong> This state is automatically saved to your browser's localStorage and will persist between sessions.\r\n                </Alert>\r\n\r\n                {/* localStorage Management */}\r\n                <Card className=\"mt-3\">\r\n                  <Card.Header className=\"bg-secondary text-white\">\r\n                    <p className=\"h6 card-title mb-0\">\r\n                      <i className=\"bi bi-gear me-2\"></i>\r\n                      localStorage Management\r\n                    </p>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                    <div className=\"mb-3\">\r\n                      <div className=\"d-flex justify-content-between align-items-center mb-2\">\r\n                        <span className=\"fw-semibold\">Status:</span>\r\n                        <Badge bg={localStorageInfo.hasData ? 'success' : 'warning'}>\r\n                          {localStorageInfo.hasData ? 'Data Stored' : 'No Data'}\r\n                        </Badge>\r\n                      </div>\r\n                      {localStorageInfo.hasData && (\r\n                        <div className=\"d-flex justify-content-between align-items-center mb-2\">\r\n                          <span className=\"fw-semibold\">Size:</span>\r\n                          <span className=\"text-muted\">{localStorageInfo.dataSize} bytes</span>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                    \r\n                    <div className=\"d-grid gap-2\">\r\n                      <Button\r\n                        variant=\"outline-info\"\r\n                        size=\"sm\"\r\n                        onClick={refreshLocalStorageInfo}\r\n                      >\r\n                        <i className=\"bi bi-arrow-clockwise me-2\"></i>\r\n                        Refresh Info\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"outline-danger\"\r\n                        size=\"sm\"\r\n                        onClick={clearLocalStorage}\r\n                      >\r\n                        <i className=\"bi bi-trash me-2\"></i>\r\n                        Clear localStorage & Reset\r\n                      </Button>\r\n                    </div>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Card.Body>\r\n            </Card>\r\n\r\n            <Card>\r\n              <Card.Header className=\"bg-primary text-white\">\r\n                <p className=\"h3 card-title mb-0\">\r\n                  🥸 Session Identity Details\r\n                </p>\r\n              </Card.Header>\r\n              <Card.Body>\r\n              <Row className=\"g-3\">\r\n                  <Col xs={12}>\r\n                    <div className=\"d-flex justify-content-between align-items-center p-3 bg-light rounded\">\r\n                      <span className=\"fw-semibold\">App Session ID:</span>\r\n                      <Badge bg=\"info\" className=\"fs-6\">\r\n                        {appSessionId}\r\n                      </Badge>\r\n                    </div>\r\n                  </Col>\r\n\r\n                  <Col xs={12}>\r\n                    <div className=\"d-flex justify-content-between align-items-center p-3 bg-light rounded\">\r\n                      <span className=\"fw-semibold\">Anonymous ID:</span>\r\n                      <Badge bg=\"info\" className=\"fs-6\">\r\n                        {anonymousId}\r\n                      </Badge>\r\n                    </div>\r\n                  </Col>\r\n\r\n                  <Col xs={12}>\r\n                    <div className=\"d-flex justify-content-between align-items-center p-3 bg-light rounded\">\r\n                      <span className=\"fw-semibold\">External Device Session ID:</span>\r\n                      <Badge bg=\"info\" className=\"fs-6\">\r\n                        {externalDeviceSessionId}\r\n                      </Badge>\r\n                    </div>\r\n                  </Col>\r\n\r\n                  {/* External User ID Status */}\r\n                  <Col xs={12}>\r\n                    <div className={`d-flex justify-content-between align-items-center p-3 rounded ${externalUserId ? 'bg-success bg-opacity-10 border border-success' : 'bg-light'}`}>\r\n                      <span className=\"fw-semibold\">External User ID:</span>\r\n                      <Badge\r\n                        bg={externalUserId ? 'success' : 'info'}\r\n                        className=\"fs-6\"\r\n                      >\r\n                        {externalUserId || 'Not Set'}\r\n                      </Badge>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>            \r\n          </Col>\r\n\r\n          {/* Todo List Section */}\r\n          <Col lg={4}>\r\n            <Card className=\"shadow h-100\">\r\n              <Card.Header className=\"bg-success text-white\">\r\n                <p className=\"h3 card-title mb-0\">\r\n                  <i className=\"bi bi-clipboard-check me-2\"></i>\r\n                  ✅ Learning Tasks\r\n                </p>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                {/* Todo Items */}\r\n                <div className=\"mb-4\">\r\n                  {Object.values(todos).map(todo => (\r\n                    <div\r\n                      key={todo.id}\r\n                      className={`d-flex align-items-center p-3 mb-2 rounded border ${todo.done\r\n                        ? 'bg-success bg-opacity-10 border-success'\r\n                        : 'bg-light border-light'\r\n                      }`}\r\n                    >\r\n                      <Form.Check\r\n                        className=\"me-3\"\r\n                        type=\"switch\"\r\n                        checked={todo.done}\r\n                        onChange={() => toggleTodo(todo.id)}\r\n                        style={{ width: '1.2rem', height: '1.2rem' }}\r\n                      />\r\n                      <span className={`fs-5 ${todo.done ? 'text-success text-decoration-line-through' : 'text-dark'}`}>\r\n                        {todo.title}\r\n                      </span>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n\r\n                {/* Progress Summary */}\r\n                <div className=\"bg-primary bg-opacity-10 p-3 rounded\">\r\n                  <div className=\"d-flex justify-content-between align-items-center mb-2\">\r\n                    <span className=\"fw-semibold text-white\">Task Progress</span>\r\n                    <span className=\"fw-semibold text-white\">\r\n                      {completedTodos}\r\n                      {' '}\r\n                      /\r\n                      {totalTodos}\r\n                    </span>\r\n                  </div>\r\n                  <ProgressBar\r\n                    now={progressPercentage}\r\n                    variant=\"primary\"\r\n                    style={{ height: '1.5rem' }}\r\n                    label={`${Math.round(progressPercentage)}%`}\r\n                  />\r\n                </div>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n\r\n          {/* Users Section */}\r\n          <Col lg={4}>\r\n            <Card className=\"shadow h-100\">\r\n              <Card.Header className=\"bg-info text-white\">\r\n                <p className=\"h3 card-title mb-0\">\r\n                  <i className=\"bi bi-people me-2\"></i>\r\n                  🛜 Fetched Users\r\n                </p>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                {/* Control Button */}\r\n                <div className=\"d-grid gap-2 mb-4\">\r\n                  <Button\r\n                    variant=\"info\"\r\n                    size=\"lg\"\r\n                    onClick={() => fetchUsers()}\r\n                    disabled={isLoadingUsers}\r\n                  >\r\n                    <i className=\"bi bi-arrow-clockwise me-2\"></i>\r\n                    {isLoadingUsers ? 'Loading...' : 'Refresh Users'}\r\n                  </Button>\r\n                </div>\r\n\r\n                <hr />\r\n\r\n                {/* External User ID Info */}\r\n                {externalUserId && (\r\n                  <Alert variant=\"success\" className=\"mb-3\">\r\n                    <i className=\"bi bi-check-circle me-2\"></i>\r\n                    <strong>External User ID Set!</strong>\r\n                    {' '}\r\n                    The Zustand subscription has triggered and axios interceptors will now include the\r\n                    <code>X-External-User-Id</code>\r\n                    {' '}\r\n                    header in all requests.\r\n                  </Alert>\r\n                )}\r\n\r\n                {/* Users Display */}\r\n                <div className=\"mb-4\">\r\n                  {isLoadingUsers\r\n                    ? (\r\n                        <div className=\"text-center p-4\">\r\n                          <Spinner animation=\"border\" variant=\"info\" role=\"status\">\r\n                            <span className=\"visually-hidden\">Loading...</span>\r\n                          </Spinner>\r\n                          <p className=\"mt-2 text-muted\">Fetching users...</p>\r\n                        </div>\r\n                      )\r\n                    : users.length > 0\r\n                      ? (\r\n                          users.map((user, index) => (\r\n                            <div\r\n                              key={user.userId || index}\r\n                              className=\"d-flex align-items-center p-3 mb-2 rounded border bg-light\"\r\n                            >\r\n                              <div className=\"me-3\">\r\n                                <Image\r\n                                  src={user.avatar}\r\n                                  alt={`${user.username} avatar`}\r\n                                  roundedCircle\r\n                                  style={{ width: '3rem', height: '3rem' }}\r\n                                />\r\n                              </div>\r\n                              <div className=\"flex-grow-1\">\r\n                                <h6 className=\"mb-1 fw-bold\">{user.username}</h6>\r\n                                <p className=\"mb-1 text-muted small\">{user.email}</p>\r\n                                <p className=\"mb-0 text-muted small\">\r\n                                  Registered:\r\n                                  {' '}\r\n                                  {new Date(user.registeredAt).toLocaleDateString()}\r\n                                </p>\r\n                              </div>\r\n                            </div>\r\n                          ))\r\n                        )\r\n                      : (\r\n                          <div className=\"text-center p-4 text-muted\">\r\n                            <i className=\"bi bi-people fs-1 mb-3\"></i>\r\n                            <p>No users loaded. Click \"Refresh Users\" to fetch data.</p>\r\n                          </div>\r\n                        )}\r\n                </div>\r\n\r\n                {/* Users Summary */}\r\n                <div className=\"bg-info bg-opacity-10 p-3 rounded\">\r\n                  <div className=\"d-flex justify-content-between align-items-center\">\r\n                    <span className=\"fw-semibold text-info\">Total Users</span>\r\n                    <Badge bg=\"info\" className=\"fs-6\">\r\n                      {users.length}\r\n                    </Badge>\r\n                  </div>\r\n                </div>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { useEffect } from 'react'\r\nimport { appInitStore } from './store'\r\nimport { SessionStartupType, AppInitStage } from './types'\r\n\r\nexport type TrackAppInitStageProps = {\r\n  isFirstAppLaunch: boolean\r\n  startType: SessionStartupType\r\n}\r\n\r\nexport const useTrackAppInitStage = ({\r\n  isFirstAppLaunch,\r\n  startType,\r\n}: TrackAppInitStageProps) => {\r\n  const currentStage = appInitStore.use.currentStage()\r\n\r\n  const startAppInit = appInitStore(state => state.startAppInit)\r\n  const setStartType = appInitStore(state => state.setSessionStartupType)\r\n  const setIsFirstAppLaunch = appInitStore(state => state.setIsFirstAppLaunch)\r\n\r\n  useEffect(() => {\r\n    if (currentStage === AppInitStage.PROCESS_STARTED) {\r\n      startAppInit(isFirstAppLaunch, startType)\r\n    }\r\n  }, [currentStage, isFirstAppLaunch, startType, startAppInit])\r\n\r\n  return {\r\n    setSessionStartupType: setStartType,\r\n    setIsFirstAppLaunch: setIsFirstAppLaunch,\r\n  }\r\n}\r\n","import { instance } from './axios-instance'\r\n\r\nexport const getCurrentUser = async () => {\r\n  const response = await instance.get('/users/1')\r\n  return response.data\r\n}\r\n\r\nexport const getUserList = async () => {\r\n  const response = await instance.get('/users')\r\n  const userList = response.data\r\n  return userList.slice(0, 5)\r\n}\n","import { StrictMode } from 'react'\r\nimport { createRoot } from 'react-dom/client'\r\n\r\nimport { App } from './App'\r\n\r\nconst root = createRoot(document.getElementById('root'))\r\nroot.render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n)\n"],"sourceRoot":""}